{"version":3,"sources":["components/Grid.js","components/Jumbotron.js","components/Title.js","components/Search.js","components/HeaderRow.js","components/Result.js","utils/API.js","components/List.js","App.js","serviceWorker.js","index.js"],"names":["Cont","fluid","children","className","Row","Col","size","split","map","join","Jumbotron","Title","Search","props","onChange","handleInputChange","value","name","type","placeholder","id","onClick","handleFormSubmit","handleReset","HeaderRow","handleSort","Result","thumbnail","first","last","email","phone","city","state","key","src","alt","axios","get","BASEURL","List","search","renderResults","loadUsers","API","then","res","cleanedResults","data","results","x","location","picture","setState","catch","err","console","log","event","target","preventDefault","searchUsers","query","filteredArray","filter","includes","param","sortedArray","sort","a","b","this","Component","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"0RAEO,SAASA,EAAT,GAAoC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SAC5B,OAAO,yBAAKC,UAAS,mBAAcF,EAAQ,SAAW,KAAOC,GAGxD,SAASE,EAAT,GAAmC,IAApBH,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SAC3B,OAAO,yBAAKC,UAAS,aAAQF,EAAQ,SAAW,GAA3B,oBAAiDC,GAGjE,SAASG,EAAT,GAAkC,IAAnBC,EAAkB,EAAlBA,KAAMJ,EAAY,EAAZA,SAC1B,OACE,yBACEC,UAAWG,EACRC,MAAM,KACNC,KAAI,SAAAF,GAAI,MAAI,OAASA,EAAO,0BAC5BG,KAAK,MAEPP,GCRQQ,MARf,YAAkC,IAAbR,EAAY,EAAZA,SACnB,OACE,yBAAKC,UAAU,SACZD,ICIQS,MANf,WACE,OACE,kBAAC,EAAD,4BCeWC,MAlBf,SAAgBC,GACd,OACE,yBAAKV,UAAU,gCACb,2BACEW,SAAUD,EAAME,kBAChBC,MAAOH,EAAMG,MACbC,KAAK,SACLC,KAAK,OACLC,YAAY,sBACZC,GAAG,SACHjB,UAAU,YAEZ,4BAAQkB,QAASR,EAAMS,iBAAkBnB,UAAU,kBAAnD,UACA,4BAAQkB,QAASR,EAAMU,YAAapB,UAAU,kBAA9C,WCWSqB,MAtBf,YAAoC,IAAfC,EAAc,EAAdA,WACnB,OACE,yBAAKtB,UAAU,0BACb,kBAACE,EAAD,CAAKC,KAAK,QACR,uBAAGc,GAAG,YAAYjB,UAAU,cAAckB,QAASI,GAAnD,UAEF,kBAACpB,EAAD,CAAKC,KAAK,QACR,uBAAGc,GAAG,QAAQjB,UAAU,cAAckB,QAASI,GAA/C,SAEF,kBAACpB,EAAD,CAAKC,KAAK,QACR,uBAAGc,GAAG,QAAQjB,UAAU,cAAckB,QAASI,GAA/C,UAEF,kBAACpB,EAAD,CAAKC,KAAK,QACR,uBAAGc,GAAG,QAAQjB,UAAU,cAAckB,QAASI,GAA/C,UAEF,kBAACpB,EAAD,CAAKC,KAAK,QACR,uBAAGc,GAAG,OAAOjB,UAAU,cAAckB,QAASI,GAA9C,eCUOC,MA1Bf,YAA4E,IAA1DN,EAAyD,EAAzDA,GAAIO,EAAqD,EAArDA,UAAWC,EAA0C,EAA1CA,MAAOC,EAAmC,EAAnCA,KAAMC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,KAAMC,EAAS,EAATA,MAChE,OACE,kBAAC7B,EAAD,CAAK8B,IAAKd,GACR,kBAACf,EAAD,CAAKC,KAAK,QACR,yBAAKH,UAAU,UAAUgC,IAAKR,EAAWS,IAAG,UAAKR,EAAL,YAAcC,MAE5D,kBAACxB,EAAD,CAAKC,KAAK,QACR,2BACGsB,EADH,IACWC,IAGb,kBAACxB,EAAD,CAAKC,KAAK,QACR,2BAAIwB,IAEN,kBAACzB,EAAD,CAAKC,KAAK,QACR,2BAAIyB,IAEN,kBAAC1B,EAAD,CAAKC,KAAK,QACR,2BACG0B,EADH,KACWC,M,iBCdJ,EACL,WACN,OAAOI,IAAMC,IAJAC,kDCoHFC,E,4MAjHbP,MAAQ,CACNQ,OAAQ,GACRC,cAAe,CAAC,CAAEtB,GAAI,M,EAOxBuB,UAAY,WAC6B,KAAnC,EAAKV,MAAMS,cAAc,GAAGtB,IAC9BwB,IACGC,MAAK,SAACC,GACL,IAAIC,EAAiBD,EAAIE,KAAKC,QAAQzC,KAAI,SAAC0C,GACzC,MAAO,CACL9B,GAAI8B,EAAE9B,GAAGJ,MACTY,MAAOsB,EAAEjC,KAAKW,MACdC,KAAMqB,EAAEjC,KAAKY,KACbG,KAAMkB,EAAEC,SAASnB,KACjBC,MAAOiB,EAAEC,SAASlB,MAClBF,MAAOmB,EAAEnB,MACTD,MAAOoB,EAAEpB,MACTH,UAAWuB,EAAEE,QAAQzB,cAGzB,EAAK0B,SAAS,CACZJ,QAAQ,YAAKF,GACbL,cAAc,YAAKK,QAGtBO,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAIF,O,EAMlCxC,kBAAoB,SAAC2C,GACnB,IAAM1C,EAAQ0C,EAAMC,OAAO3C,MACrBC,EAAOyC,EAAMC,OAAO1C,KAC1B,EAAKoC,SAAL,eACGpC,EAAOD,K,EAIZM,iBAAmB,SAACoC,GAClBA,EAAME,iBACN,EAAKC,YAAY,EAAK5B,MAAMQ,S,EAG9BlB,YAAc,WACZ,EAAK8B,SAAS,CACZX,cAAc,YAAK,EAAKT,MAAMgB,SAC9BR,OAAQ,M,EAIZoB,YAAc,SAACC,GACb,IAAIC,EAAgB,EAAK9B,MAAMgB,QAAQe,QAAO,SAACd,GAC7C,OACEA,EAAEtB,MAAMqC,SAASH,IACjBZ,EAAErB,KAAKoC,SAASH,IAChBZ,EAAElB,KAAKiC,SAASH,IAChBZ,EAAEjB,MAAMgC,SAASH,IACjBZ,EAAEnB,MAAMkC,SAASH,IACjBZ,EAAEpB,MAAMmC,SAASH,MAGrB,EAAKT,SAAS,CAAEX,cAAc,YAAKqB,GAAgBtB,OAAQ,M,EAG7DhB,WAAa,SAACiC,GACZ,IAAMQ,EAAQR,EAAMC,OAAOvC,GACvB+C,EAAW,YAAO,EAAKlC,MAAMS,eACjCyB,EAAYC,MAAK,SAACC,EAAGC,GACnB,OAAID,EAAEH,GAASI,EAAEJ,GACR,GAEC,KAGZ,EAAKb,SAAS,CACZX,cAAc,YAAKyB,M,kEA3ErBI,KAAK5B,c,+BAgFL,OACE,kBAAC3C,EAAD,CAAMC,OAAK,GACT,kBAAC,EAAD,MACA,kBAAC,EAAD,CACEc,kBAAmBwD,KAAKxD,kBACxBO,iBAAkBiD,KAAKjD,iBACvBC,YAAagD,KAAKhD,YAClBP,MAAOuD,KAAKtC,MAAMQ,SAEpB,kBAAC,EAAD,CAAWhB,WAAY8C,KAAK9C,aAC3B8C,KAAKtC,MAAMS,cAAclC,KAAI,SAAC0C,GAAD,OAC5B,kBAAC,EAAD,CACE9B,GAAI8B,EAAE9B,GACNO,UAAWuB,EAAEvB,UACbC,MAAOsB,EAAEtB,MACTC,KAAMqB,EAAErB,KACRC,MAAOoB,EAAEpB,MACTC,MAAOmB,EAAEnB,MACTC,KAAMkB,EAAElB,KACRC,MAAOiB,EAAEjB,gB,GA1GFuC,a,MCGJC,MANf,WACE,OACI,kBAAC,EAAD,OCIcC,QACW,cAA7BC,OAAOxB,SAASyB,UAEe,UAA7BD,OAAOxB,SAASyB,UAEhBD,OAAOxB,SAASyB,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxC,MAAK,SAAAyC,GACJA,EAAaC,gBAEdjC,OAAM,SAAAkC,GACLhC,QAAQgC,MAAMA,EAAMC,c","file":"static/js/main.e375775d.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport function Cont({ fluid, children }) {\r\n  return <div className={`container${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\r\n}\r\n\r\nexport function Row({ fluid, children }) {\r\n  return <div className={`row${fluid ? \"-fluid\" : \"\"} result mx-auto`}>{children}</div>;\r\n}\r\n\r\nexport function Col({ size, children }) {\r\n  return (\r\n    <div\r\n      className={size\r\n        .split(\" \")\r\n        .map(size => \"col-\" + size + \" mx-auto text-center\")\r\n        .join(\" \")}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nfunction Jumbotron({ children }) {\r\n  return (\r\n    <div className=\"jumbo\">\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Jumbotron;\r\n","import React from \"react\";\r\nimport Jumbotron from \"./Jumbotron\";\r\n\r\nfunction Title() {\r\n  return (\r\n    <Jumbotron>Employee Directory</Jumbotron>\r\n  );\r\n}\r\n\r\nexport default Title;\r\n","import React from \"react\";\r\n\r\nfunction Search(props) {\r\n  return (\r\n    <div className=\"search-container row mx-auto\">\r\n      <input\r\n        onChange={props.handleInputChange}\r\n        value={props.value}\r\n        name=\"search\"\r\n        type=\"text\"\r\n        placeholder=\"Enter a search term\"\r\n        id=\"search\"\r\n        className=\"mx-auto\"\r\n      />\r\n      <button onClick={props.handleFormSubmit} className=\"button mx-auto\">Search</button>\r\n      <button onClick={props.handleReset} className=\"button mx-auto\">Reset</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Search;","import React from \"react\";\r\n\r\nimport { Col } from \"./Grid\";\r\n\r\nfunction HeaderRow({ handleSort }) {\r\n  return (\r\n    <div className=\"row mx-auto header-row\">\r\n      <Col size=\"md-1\">\r\n        <p id=\"thumbnail\" className=\"header-item\" onClick={handleSort}>Image</p>\r\n      </Col>\r\n      <Col size=\"md-2\">\r\n        <p id=\"first\" className=\"header-item\" onClick={handleSort}>Name</p>\r\n      </Col>\r\n      <Col size=\"md-3\">\r\n        <p id=\"email\" className=\"header-item\" onClick={handleSort}>Email</p>\r\n      </Col>\r\n      <Col size=\"md-2\">\r\n        <p id=\"phone\" className=\"header-item\" onClick={handleSort}>Phone</p>\r\n      </Col>\r\n      <Col size=\"md-2\">\r\n        <p id=\"city\" className=\"header-item\" onClick={handleSort}>Location</p>\r\n      </Col>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default HeaderRow;\r\n","import React from \"react\";\r\n\r\nimport { Col, Row } from \"./Grid\";\r\n\r\nfunction Result({ id, thumbnail, first, last, email, phone, city, state }) {\r\n  return (\r\n    <Row key={id}>\r\n      <Col size=\"md-1\">\r\n        <img className=\"mx-auto\" src={thumbnail} alt={`${first} ${last}`} />\r\n      </Col>\r\n      <Col size=\"md-2\">\r\n        <p>\r\n          {first} {last}\r\n        </p>\r\n      </Col>\r\n      <Col size=\"md-3\">\r\n        <p>{email}</p>\r\n      </Col>\r\n      <Col size=\"md-2\">\r\n        <p>{phone}</p>\r\n      </Col>\r\n      <Col size=\"md-2\">\r\n        <p>\r\n          {city}, {state}\r\n        </p>\r\n      </Col>\r\n    </Row>\r\n  )\r\n}\r\n\r\nexport default Result;\r\n","import axios from \"axios\";\r\nconst BASEURL = \"https://randomuser.me/api/\";\r\nconst resultsString = \"?results=\";\r\nconst nationalityString = \"&nat=\";\r\nconst numberOfResults = \"200\";\r\nconst nationality = \"us\";\r\n\r\nconst queryURL = BASEURL + resultsString + numberOfResults + nationalityString + nationality;\r\n\r\nexport default {\r\n  search: function() {\r\n    return axios.get(queryURL);\r\n  }\r\n};\r\n","import React, { Component } from \"react\";\r\n\r\nimport { Cont } from \"./Grid\";\r\nimport Title from \"./Title\";\r\nimport Search from \"./Search\";\r\nimport HeaderRow from \"./HeaderRow\";\r\nimport Result from \"./Result\";\r\nimport API from \"../utils/API\";\r\n\r\nclass List extends Component {\r\n  state = {\r\n    search: \"\",\r\n    renderResults: [{ id: \"\" }],\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.loadUsers();\r\n  }\r\n\r\n  loadUsers = () => {\r\n    if (this.state.renderResults[0].id === \"\") {\r\n      API.search()\r\n        .then((res) => {\r\n          let cleanedResults = res.data.results.map((x) => {\r\n            return {\r\n              id: x.id.value,\r\n              first: x.name.first,\r\n              last: x.name.last,\r\n              city: x.location.city,\r\n              state: x.location.state,\r\n              phone: x.phone,\r\n              email: x.email,\r\n              thumbnail: x.picture.thumbnail,\r\n            };\r\n          });\r\n          this.setState({\r\n            results: [...cleanedResults],\r\n            renderResults: [...cleanedResults],\r\n          });\r\n        })\r\n        .catch((err) => console.log(err));\r\n    } else {\r\n      return;\r\n    }\r\n  };\r\n\r\n  handleInputChange = (event) => {\r\n    const value = event.target.value;\r\n    const name = event.target.name;\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  handleFormSubmit = (event) => {\r\n    event.preventDefault();\r\n    this.searchUsers(this.state.search);\r\n  };\r\n\r\n  handleReset = () => {\r\n    this.setState({\r\n      renderResults: [...this.state.results],\r\n      search: \"\",\r\n    });\r\n  };\r\n\r\n  searchUsers = (query) => {\r\n    let filteredArray = this.state.results.filter((x) => {\r\n      return (\r\n        x.first.includes(query) ||\r\n        x.last.includes(query) ||\r\n        x.city.includes(query) ||\r\n        x.state.includes(query) ||\r\n        x.phone.includes(query) ||\r\n        x.email.includes(query)\r\n      );\r\n    });\r\n    this.setState({ renderResults: [...filteredArray], search: \"\" });\r\n  };\r\n\r\n  handleSort = (event) => {\r\n    const param = event.target.id;\r\n    let sortedArray = [...this.state.renderResults];\r\n    sortedArray.sort((a, b) => {\r\n      if (a[param] > b[param]) {\r\n        return 1;\r\n      } else {\r\n        return -1;\r\n      }\r\n    });\r\n    this.setState({\r\n      renderResults: [...sortedArray],\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Cont fluid>\r\n        <Title />\r\n        <Search\r\n          handleInputChange={this.handleInputChange}\r\n          handleFormSubmit={this.handleFormSubmit}\r\n          handleReset={this.handleReset}\r\n          value={this.state.search}\r\n        />\r\n        <HeaderRow handleSort={this.handleSort} />\r\n        {this.state.renderResults.map((x) => (\r\n          <Result\r\n            id={x.id}\r\n            thumbnail={x.thumbnail}\r\n            first={x.first}\r\n            last={x.last}\r\n            email={x.email}\r\n            phone={x.phone}\r\n            city={x.city}\r\n            state={x.state}\r\n          />\r\n        ))}\r\n      </Cont>\r\n    );\r\n  }\r\n}\r\n\r\nexport default List;\r\n","import React from 'react';\n\nimport List from \"./components/List\";\n\nimport './App.css';\n\nfunction App() {\n  return (\n      <List />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}